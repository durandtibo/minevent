{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p><code>minevent</code> is a Python library that provides a minimal event system for Machine Learning. It allows to customize a code by adding some piece of code that are executed when an event is fired. <code>minevent</code> is organized around three main concepts:</p> <ul> <li>event which defines the thing that should happen.</li> <li>event handler which is the piece of code to execute when the event happens</li> <li>event manager which is responsible to manage the events and event handlers.</li> </ul> <p>The goal of this documentation is to explain how the event system works and how to use it. The library provides some implemented modules, but it is possible to extend it. It is possible to use all the components or just a subset based on the need. For example, an event handler can be used without the event manager.</p>"},{"location":"#motivation","title":"Motivation","text":"<p><code>minevent</code> provides a minimal event system to customize a piece of code without changing its implementation. Below is an example on how to use <code>minevent</code> library.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def say_something(manager: EventManager) -&gt; None:\n...     print(\"Hello, I am Bob!\")\n...     manager.trigger_event(\"after\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; say_something(manager)\nHello, I am Bob!\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"after\", EventHandler(hello_handler))\n&gt;&gt;&gt; say_something(manager)\nHello, I am Bob!\nHello!\n</code></pre> <p>It allows to customize the function <code>say_something</code> without changing its implementation. Please read the quickstart page to learn more about the library.</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>minevent</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>minevent</code> to a new version will possibly break any code that was using the old version of <code>minevent</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>minevent</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>We highly recommend installing a virtual environment. <code>minevent</code> can be installed from pip using the following command:</p> <pre><code>pip install minevent\n</code></pre> <p>To make the package as slim as possible, only the minimal packages required to use <code>minevent</code> are installed. To include all the dependencies, you can use the following command:</p> <pre><code>pip install minevent[all]\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>minevent</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/minevent.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate minevent\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>minevent</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"quickstart/","title":"quickstart","text":""},{"location":"quickstart/#overview","title":"Overview","text":"<p>The <code>minevent</code> event system is composed of three main components:</p> <ul> <li>an event</li> <li>an event handler</li> <li>an event manager</li> </ul> <p>It is a synchronous system i.e. only one event and event handler are executed at the same time. This page presents the design used in <code>minevent</code>, but other designs exist. The proposed design was not designed to work in all the scenarios, so it is highly recommended to read the documentation to understand if it fits your needs/requirements before to use it.</p>"},{"location":"quickstart/#event","title":"Event","text":"<p>In <code>minevent</code>, an event is a string that represents something happening. The event is represented by the event name. For example, it is possible to write the following line to define an event that happens after the training is completed.</p> <pre><code>my_event = \"training completed\"\n</code></pre>"},{"location":"quickstart/#event-handler","title":"Event handler","text":"<p>In <code>minevent</code>, an event handler is a piece a code that is executed when an even happened.</p> <p>An event handler must have two methods:</p> <ul> <li><code>handle</code> which executes a piece of code when the event happens.</li> <li><code>equal</code> which is used to compare two event handlers.</li> </ul> <p><code>minevent</code> provides two event handlers:</p> <ul> <li><code>EventHandler</code> which is a simple event handler</li> <li><code>ConditionalEventHandler</code> which is an extension of <code>EventHandler</code> to execute the logic only when a   condition is true.</li> </ul>"},{"location":"quickstart/#basic-event-handler","title":"Basic event handler","text":"<p>Let's assume we want to create an event handler to say hello when an event is fired. It is possible to implement this scenario as follow by using <code>minvent.EventHandler</code>.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"quickstart/#event-handler-with-arguments","title":"Event handler with arguments","text":"<p>The previous example has no arguments. It is also possible to provide some arguments to customize the event handler. The arguments can be given as positional arguments using <code>handler_args</code>:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler(name: str, day: str) -&gt; None:\n...     print(f\"Hello {name}! Happy {day}!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler, handler_args=(\"Bob\", \"Monday\"))\n&gt;&gt;&gt; handler.handle()\nHello Bob! Happy Monday!\n</code></pre> <p>It is also possible to give the arguments as keyword arguments using <code>handler_kwargs</code>:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler(name: str, day: str) -&gt; None:\n...     print(f\"Hello {name}! Happy {day}!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler, handler_kwargs={'name': \"Bob\", 'day': \"Monday\"})\n&gt;&gt;&gt; handler.handle()\nHello Bob! Happy Monday!\n</code></pre> <p>It is also possible to use <code>handler_args</code> and <code>handler_kwargs</code>:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler(name: str, day: str) -&gt; None:\n...     print(f\"Hello {name}! Happy {day}!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler, handler_args=[\"Bob\"], handler_kwargs={'day': \"Monday\"})\n&gt;&gt;&gt; handler.handle()\nHello Bob! Happy Monday!\n</code></pre> <p>It is possible to define event handlers with a large range of functions. For example, it is possible to implement the same logic by using directly <code>print</code>:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; handler = EventHandler(print, handler_args=(\"Hello Bob! Happy Monday!\",))\n&gt;&gt;&gt; handler.handle()\nHello Bob! Happy Monday!\n</code></pre>"},{"location":"quickstart/#event-handler-with-condition","title":"Event handler with condition","text":"<p>It is possible to define an event handler that is executed when a condition is true. The following example shows how to define an event handler where the logic is executed every three calls.</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3))\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre> <p><code>PeriodicCondition</code> is a condition implemented in <code>minevent</code> to execute an event handler with a periodic pattern. It is also possible to implement custom conditions. If the condition returns <code>True</code>, the logic associated to the event handler is executed, otherwise the logic associated to the event handler is not executed.</p>"},{"location":"quickstart/#event-handler-comparison","title":"Event handler comparison","text":"<p>It is possible to compare event handlers by using the <code>equal</code> method. Two <code>EventHandler</code>s are equal if they have the same handler and the same arguments:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.equal(EventHandler(hello_handler))\nTrue\n&gt;&gt;&gt; handler.equal(EventHandler(print, handler_args=(\"Hello Bob! Happy Monday!\",)))\nFalse\n</code></pre> <p>Two <code>EventHandler</code>s are equal if they have the same handler, the same arguments and the same condition:</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3))\n&gt;&gt;&gt; handler.equal(ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3)))\nTrue\n&gt;&gt;&gt; handler.equal(ConditionalEventHandler(hello_handler, PeriodicCondition(freq=2)))\nFalse\n</code></pre>"},{"location":"quickstart/#event-manager","title":"Event manager","text":"<ul> <li>Overview of the event manager</li> <li>Create an event manager</li> <li>Add an event handler</li> <li>Check the presence of an event handler</li> <li>Fire an event</li> <li>Remove an event handler</li> <li>Reset the event manager</li> <li>Internals</li> </ul>"},{"location":"quickstart/#overview-of-the-event-manager","title":"Overview of the event manager","text":"<p>As explained by its name, the goal of the event manager is to manage event handlers. The event manager supports the following functionalities:</p> <ul> <li>adding an event handler</li> <li>firing all the event handlers associated to an event.</li> <li>removing an event handler from an event</li> </ul>"},{"location":"quickstart/#create-an-event-manager","title":"Create an event manager","text":"<p>To use the event system, it is important to create an event manager. <code>minevent</code> implements an event manager, but it is possible to implement and use other compatible event managers. This documentation uses the default event manager implemented in <code>minevent</code>. To create an event manager, you can write:</p> <pre><code>&gt;&gt;&gt; from minevent import EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n  (last_triggered_event): None\n)\n</code></pre> <p>The main pieces of information about the experiment manager state are the list of event handlers for each event name, and the last fired event name. The event manager is empty, so it shows there is no event handler. In this example, there was no event fired so the last fired event name is <code>None</code>.</p>"},{"location":"quickstart/#add-an-event-handler","title":"Add an event handler","text":"<p>This section describes how to add an event handler to an event manager. The method to add an event handler to the event manager is <code>add_event_handler</code>. There are several approaches to add an event handler.</p> <p>The simplest approach requires an event and an event handler. The following example shows how to add a <code>hello_handler</code> handler to the <code>'my_event'</code> event.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n        (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n</code></pre> <p>You can see there is a registered event handler for the event name <code>my_event</code>.</p> <p>It is possible to add an event handler that takes some input arguments. The following example shows how to add an event handler with some positional arguments.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler(first_name: str, last_name: str) -&gt; None:\n...     print(f\"Hello. I am {last_name}, {first_name} {last_name}\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler, ('John', 'Smith')))\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler, ('Jane', 'Doe')))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ('John', 'Smith')\n          (handler_kwargs): {}\n        )\n      (1): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ('Jane', 'Doe')\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n</code></pre> <p>For a given event, the event handlers are ordered by using the order of addition. The event handler <code>(0)</code> was added before the event handler <code>(1)</code>. Internally, each event uses a list to store the registered event handlers. It is possible to add the same event handler multiple times:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n      (1): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n</code></pre>"},{"location":"quickstart/#check-the-presence-of-an-event-handler","title":"Check the presence of an event handler","text":"<p>It is possible to check if an event handler is in the event manager by using the <code>has_event_handler</code> method. Sometimes, it may be important to check if an event handler is not already added before to add it. The following code shows how to check if the <code>hello_handler</code> handler is registered at least one time in the event manager:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nFalse\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nTrue\n</code></pre> <p>Note that it is not necessary to specify an event. If no event is specified, this method checks if the handler is present in any of the events. It is possible to specify an event to check if a handler is registered for a given event. The following code shows how to check if the <code>hello_handler</code> handler is registered for the <code>'my_event'</code> event:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_other_event\")\nFalse\n</code></pre> <p>If you want to add an event handler only once, you can write something like:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; for _ in range(5):\n...     if not manager.has_event_handler(EventHandler(hello_handler), \"my_event\"):\n...         manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n</code></pre> <p>The <code>hello_handler</code> handler has been added only one time to the <code>'my_event'</code> event.</p>"},{"location":"quickstart/#fire-an-event","title":"Fire an event","text":"<p>This section describes how to fire an event. As explained above, it is possible to add a handler to an event. Then, we want to execute the handler when the event is fired. The following example shows how to fire the <code>hello_handler</code> for the event <code>'my_event'</code>:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): my_event\n)\n</code></pre> <p>You can note that the last fired event name has been updated. The current last fired event name is <code>'my_event'</code>. The event manager uses the arguments that were given when the event handler was added.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler(first_name: str, last_name: str) -&gt; None:\n...     print(f\"Hello. I am {first_name} {last_name}\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler, ('John', 'Smith')))\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler, ('Jane', 'Doe')))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ('John', 'Smith')\n          (handler_kwargs): {}\n        )\n      (1): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ('Jane', 'Doe')\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello. I am John Smith\nHello. I am Jane Doe\n</code></pre> <p>As explained above, it is possible to add a condition to control when to execute the handler. The following shows how to execute the <code>hello_handler</code> every 3 <code>'my_event'</code> events.</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3)))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): ConditionalEventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n          (condition): PeriodicCondition(freq=3, step=0)\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; for i in range(10):\n...     print(f'i={i}')\n...     manager.trigger_event(\"my_event\")\n...\ni=0\nHello!\ni=1\ni=2\ni=3\nHello!\ni=4\ni=5\ni=6\nHello!\ni=7\ni=8\ni=9\nHello!\n</code></pre> <p>The <code>trigger_event</code> method does nothing if there is no event handler registered for the event:</p> <pre><code>&gt;&gt;&gt; from minevent import EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\n</code></pre>"},{"location":"quickstart/#remove-an-event-handler","title":"Remove an event handler","text":"<p>A previous section describes how to add an event handler, but sometimes it is useful to remove an event handler. The method <code>remove_event_handler</code> allows to remove an event handler from the event manager. As explained above, the event handler is identified by an event name and a handler. The following example shows how to add and remove an event handler:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n        (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.remove_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n  (last_triggered_event): None\n)\n</code></pre> <p>If there are multiple event handlers that match, they are all removed from the event manager:</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition, EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3)))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n      (1): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n      (2): ConditionalEventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n          (condition): PeriodicCondition(freq=3, step=0)\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.remove_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): ConditionalEventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n          (condition): PeriodicCondition(freq=3, step=0)\n        )\n  (last_triggered_event): None\n)\n</code></pre> <p>If a handler is used for multiple events, only the handler associated to the event are removed:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.add_event_handler(\"my_other_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n    (my_other_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.remove_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_other_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at  0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n</code></pre> <p>A <code>RuntimeError</code> exception is raised if you try to remove an event handler that does not exist.</p>"},{"location":"quickstart/#reset-the-event-manager","title":"Reset the event manager","text":"<p>It is possible to reset the event manager with the <code>reset</code> method. It removes all the event handlers and set the last fired event name to <code>None</code>. It is equivalent to create a new experiment manager.</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.add_event_handler(\"my_other_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n    (my_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at 0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n    (my_other_event):\n      (0): EventHandler(\n          (handler): &lt;function hello_handler at 0x...&gt;\n          (handler_args): ()\n          (handler_kwargs): {}\n        )\n  (last_triggered_event): None\n)\n&gt;&gt;&gt; manager.reset()\n&gt;&gt;&gt; manager\nEventManager(\n  (event_handlers):\n  (last_triggered_event): None\n)\n</code></pre>"},{"location":"refs/","title":"Main classes and functions","text":""},{"location":"refs/#minevent","title":"minevent","text":"<p>Contain the main features of the <code>minevent</code> package.</p>"},{"location":"refs/#minevent.BaseCondition","title":"minevent.BaseCondition","text":"<p>             Bases: <code>ABC</code></p> <p>Define the base class to implement a condition for <code>ConditionalEventHandler</code>.</p> <p>A child class has to implement the following methods:</p> <pre><code>- ``evaluate``\n- ``equal``\n</code></pre> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n</code></pre>"},{"location":"refs/#minevent.BaseCondition.equal","title":"minevent.BaseCondition.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Compare two conditions.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>Specifies the other object to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two conditions are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.equal(PeriodicCondition(freq=3))\nTrue\n&gt;&gt;&gt; condition.equal(PeriodicCondition(freq=2))\nFalse\n</code></pre>"},{"location":"refs/#minevent.BaseCondition.evaluate","title":"minevent.BaseCondition.evaluate  <code>abstractmethod</code>","text":"<pre><code>evaluate() -&gt; bool\n</code></pre> <p>Evaluate the condition given the current state.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the condition is <code>True</code> and the event handler logic should be executed, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.BaseEventHandler","title":"minevent.BaseEventHandler","text":"<p>             Bases: <code>ABC</code></p> <p>Define the base class to implement an event handler.</p> <p>A child class has to implement the following methods:</p> <pre><code>- ``handle``\n- ``equal``\n</code></pre> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.BaseEventHandler.equal","title":"minevent.BaseEventHandler.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Compare two event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>Specifies the other object to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two event handlers are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.equal(EventHandler(hello_handler))\nTrue\n&gt;&gt;&gt; handler.equal(EventHandler(print, handler_args=[\"Hello!\"]))\nFalse\n</code></pre>"},{"location":"refs/#minevent.BaseEventHandler.handle","title":"minevent.BaseEventHandler.handle  <code>abstractmethod</code>","text":"<pre><code>handle() -&gt; None\n</code></pre> <p>Handle the event.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.BaseEventHandlerWithArguments","title":"minevent.BaseEventHandlerWithArguments","text":"<p>             Bases: <code>BaseEventHandler</code></p> <p>Define a base class to implement an event handler with positional and/or keyword arguments.</p> <p>A child class has to implement the <code>equal</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable</code> <p>Specifies the handler.</p> required <code>handler_args</code> <code>Sequence | None</code> <p>Specifies the positional arguments of the handler.</p> <code>None</code> <code>handler_kwargs</code> <code>dict | None</code> <p>Specifies the arbitrary keyword arguments of the handler.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler = EventHandler(print, handler_args=[\"Hello!\"])\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.BaseEventHandlerWithArguments.handler","title":"minevent.BaseEventHandlerWithArguments.handler  <code>property</code>","text":"<pre><code>handler: Callable\n</code></pre> <p>The handler.</p>"},{"location":"refs/#minevent.BaseEventHandlerWithArguments.handler_args","title":"minevent.BaseEventHandlerWithArguments.handler_args  <code>property</code>","text":"<pre><code>handler_args: tuple\n</code></pre> <p>Variable length argument list of the handler.</p>"},{"location":"refs/#minevent.BaseEventHandlerWithArguments.handler_kwargs","title":"minevent.BaseEventHandlerWithArguments.handler_kwargs  <code>property</code>","text":"<pre><code>handler_kwargs: dict\n</code></pre> <p>Arbitrary keyword arguments of the handler.</p>"},{"location":"refs/#minevent.ConditionalEventHandler","title":"minevent.ConditionalEventHandler","text":"<p>             Bases: <code>BaseEventHandlerWithArguments</code></p> <p>Implement a conditional event handler.</p> <p>The handler is executed only if the condition is <code>True</code>.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable</code> <p>Specifies the handler.</p> required <code>condition</code> <code>BaseCondition</code> <p>Specifies the condition for this event handler. The condition should be callable without arguments.</p> required <code>handler_args</code> <code>Sequence | None</code> <p>Specifies the positional arguments of the handler.</p> <code>None</code> <code>handler_kwargs</code> <code>dict | None</code> <p>Specifies the arbitrary keyword arguments of the handler.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3))\n&gt;&gt;&gt; handler\nConditionalEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n  (condition): PeriodicCondition(freq=3, step=0)\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.ConditionalEventHandler.condition","title":"minevent.ConditionalEventHandler.condition  <code>property</code>","text":"<pre><code>condition: BaseCondition\n</code></pre> <p>The condition.</p>"},{"location":"refs/#minevent.EventHandler","title":"minevent.EventHandler","text":"<p>             Bases: <code>BaseEventHandlerWithArguments</code></p> <p>Implement a simple event handler.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/#minevent.EventManager","title":"minevent.EventManager","text":"<p>Implement an event manager.</p> <p>This event manager allows adding event handlers and firing events. An event is represented by a case-sensitive string.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n</code></pre>"},{"location":"refs/#minevent.EventManager.last_triggered_event","title":"minevent.EventManager.last_triggered_event  <code>property</code>","text":"<pre><code>last_triggered_event: str | None\n</code></pre> <p>Get the last event name that was triggered.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The last event name that was fired of <code>None</code> if no event was fired.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n&gt;&gt;&gt; manager.last_triggered_event\n</code></pre>"},{"location":"refs/#minevent.EventManager.add_event_handler","title":"minevent.EventManager.add_event_handler","text":"<pre><code>add_event_handler(\n    event: str, event_handler: BaseEventHandler\n) -&gt; None\n</code></pre> <p>Add an event handler to an event.</p> <p>The event handler will be called everytime the event happens.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event to attach the event handler.</p> required <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to attach to the event.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventManager, EventHandler\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n</code></pre>"},{"location":"refs/#minevent.EventManager.has_event_handler","title":"minevent.EventManager.has_event_handler","text":"<pre><code>has_event_handler(\n    event_handler: BaseEventHandler,\n    event: str | None = None,\n) -&gt; bool\n</code></pre> <p>Indicate if a handler is registered in the event manager.</p> <p>Note that this method relies on the <code>equal</code> method of the input event handler to compare event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to check.</p> required <code>event</code> <code>str | None</code> <p>Specifies an event to check. If the value is <code>None</code>, it will check all the events.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nFalse\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n&gt;&gt;&gt; # Add an event handler\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nTrue\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_other_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_other_event\")\nFalse\n</code></pre>"},{"location":"refs/#minevent.EventManager.remove_event_handler","title":"minevent.EventManager.remove_event_handler","text":"<pre><code>remove_event_handler(\n    event: str, event_handler: BaseEventHandler\n) -&gt; None\n</code></pre> <p>Remove an event handler of a given event.</p> <p>Note that if the same event handler was added multiple times the event, all the duplicated handlers are removed. This method relies on the <code>equal</code> method of the input event handler to compare event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event handler is attached to.</p> required <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to remove.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the event does not exist or if the handler is not attached to the event.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; # Remove the event handler of the engine\n&gt;&gt;&gt; manager.remove_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n</code></pre>"},{"location":"refs/#minevent.EventManager.reset","title":"minevent.EventManager.reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the event manager.</p> <p>This method removes all the event handlers from the event manager.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; # Create an event manager\n&gt;&gt;&gt; from minevent import EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; # Add an event handler to the engine\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\n&gt;&gt;&gt; manager.last_triggered_event\nmy_event\n&gt;&gt;&gt; # Reset the event manager\n&gt;&gt;&gt; manager.reset()\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n&gt;&gt;&gt; manager.last_triggered_event\nNone\n</code></pre>"},{"location":"refs/#minevent.EventManager.trigger_event","title":"minevent.EventManager.trigger_event","text":"<pre><code>trigger_event(event: str) -&gt; None\n</code></pre> <p>Trigger the handler(s) for the given event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event to fire.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")  # do nothing because there is no event handler\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n</code></pre>"},{"location":"refs/#minevent.PeriodicCondition","title":"minevent.PeriodicCondition","text":"<p>             Bases: <code>BaseCondition</code></p> <p>Implement a periodic condition.</p> <p>This condition is true every <code>freq</code> events.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>int</code> <p>Specifies the frequency.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n</code></pre>"},{"location":"refs/#minevent.PeriodicCondition.freq","title":"minevent.PeriodicCondition.freq  <code>property</code>","text":"<pre><code>freq: int\n</code></pre> <p>The frequency of the condition.</p>"},{"location":"refs/conditions/","title":"Conditions","text":""},{"location":"refs/conditions/#minevent.conditions","title":"minevent.conditions","text":"<p>Implement some conditions that can be used in the event system.</p>"},{"location":"refs/conditions/#minevent.conditions.BaseCondition","title":"minevent.conditions.BaseCondition","text":"<p>             Bases: <code>ABC</code></p> <p>Define the base class to implement a condition for <code>ConditionalEventHandler</code>.</p> <p>A child class has to implement the following methods:</p> <pre><code>- ``evaluate``\n- ``equal``\n</code></pre> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n</code></pre>"},{"location":"refs/conditions/#minevent.conditions.BaseCondition.equal","title":"minevent.conditions.BaseCondition.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Compare two conditions.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>Specifies the other object to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two conditions are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.equal(PeriodicCondition(freq=3))\nTrue\n&gt;&gt;&gt; condition.equal(PeriodicCondition(freq=2))\nFalse\n</code></pre>"},{"location":"refs/conditions/#minevent.conditions.BaseCondition.evaluate","title":"minevent.conditions.BaseCondition.evaluate  <code>abstractmethod</code>","text":"<pre><code>evaluate() -&gt; bool\n</code></pre> <p>Evaluate the condition given the current state.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the condition is <code>True</code> and the event handler logic should be executed, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/conditions/#minevent.conditions.PeriodicCondition","title":"minevent.conditions.PeriodicCondition","text":"<p>             Bases: <code>BaseCondition</code></p> <p>Implement a periodic condition.</p> <p>This condition is true every <code>freq</code> events.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>int</code> <p>Specifies the frequency.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; condition = PeriodicCondition(freq=3)\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nFalse\n&gt;&gt;&gt; condition.evaluate()\nTrue\n</code></pre>"},{"location":"refs/conditions/#minevent.conditions.PeriodicCondition.freq","title":"minevent.conditions.PeriodicCondition.freq  <code>property</code>","text":"<pre><code>freq: int\n</code></pre> <p>The frequency of the condition.</p>"},{"location":"refs/handlers/","title":"Handlers","text":""},{"location":"refs/handlers/#minevent.handlers","title":"minevent.handlers","text":"<p>Implement the event handlers.</p>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandler","title":"minevent.handlers.BaseEventHandler","text":"<p>             Bases: <code>ABC</code></p> <p>Define the base class to implement an event handler.</p> <p>A child class has to implement the following methods:</p> <pre><code>- ``handle``\n- ``equal``\n</code></pre> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandler.equal","title":"minevent.handlers.BaseEventHandler.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Compare two event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>Specifies the other object to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two event handlers are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.equal(EventHandler(hello_handler))\nTrue\n&gt;&gt;&gt; handler.equal(EventHandler(print, handler_args=[\"Hello!\"]))\nFalse\n</code></pre>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandler.handle","title":"minevent.handlers.BaseEventHandler.handle  <code>abstractmethod</code>","text":"<pre><code>handle() -&gt; None\n</code></pre> <p>Handle the event.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandlerWithArguments","title":"minevent.handlers.BaseEventHandlerWithArguments","text":"<p>             Bases: <code>BaseEventHandler</code></p> <p>Define a base class to implement an event handler with positional and/or keyword arguments.</p> <p>A child class has to implement the <code>equal</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable</code> <p>Specifies the handler.</p> required <code>handler_args</code> <code>Sequence | None</code> <p>Specifies the positional arguments of the handler.</p> <code>None</code> <code>handler_kwargs</code> <code>dict | None</code> <p>Specifies the arbitrary keyword arguments of the handler.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler = EventHandler(print, handler_args=[\"Hello!\"])\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandlerWithArguments.handler","title":"minevent.handlers.BaseEventHandlerWithArguments.handler  <code>property</code>","text":"<pre><code>handler: Callable\n</code></pre> <p>The handler.</p>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandlerWithArguments.handler_args","title":"minevent.handlers.BaseEventHandlerWithArguments.handler_args  <code>property</code>","text":"<pre><code>handler_args: tuple\n</code></pre> <p>Variable length argument list of the handler.</p>"},{"location":"refs/handlers/#minevent.handlers.BaseEventHandlerWithArguments.handler_kwargs","title":"minevent.handlers.BaseEventHandlerWithArguments.handler_kwargs  <code>property</code>","text":"<pre><code>handler_kwargs: dict\n</code></pre> <p>Arbitrary keyword arguments of the handler.</p>"},{"location":"refs/handlers/#minevent.handlers.ConditionalEventHandler","title":"minevent.handlers.ConditionalEventHandler","text":"<p>             Bases: <code>BaseEventHandlerWithArguments</code></p> <p>Implement a conditional event handler.</p> <p>The handler is executed only if the condition is <code>True</code>.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable</code> <p>Specifies the handler.</p> required <code>condition</code> <code>BaseCondition</code> <p>Specifies the condition for this event handler. The condition should be callable without arguments.</p> required <code>handler_args</code> <code>Sequence | None</code> <p>Specifies the positional arguments of the handler.</p> <code>None</code> <code>handler_kwargs</code> <code>dict | None</code> <p>Specifies the arbitrary keyword arguments of the handler.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import ConditionalEventHandler, PeriodicCondition\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3))\n&gt;&gt;&gt; handler\nConditionalEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n  (condition): PeriodicCondition(freq=3, step=0)\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/handlers/#minevent.handlers.ConditionalEventHandler.condition","title":"minevent.handlers.ConditionalEventHandler.condition  <code>property</code>","text":"<pre><code>condition: BaseCondition\n</code></pre> <p>The condition.</p>"},{"location":"refs/handlers/#minevent.handlers.EventHandler","title":"minevent.handlers.EventHandler","text":"<p>             Bases: <code>BaseEventHandlerWithArguments</code></p> <p>Implement a simple event handler.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; handler\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/manager/","title":"Manager","text":""},{"location":"refs/manager/#minevent.manager","title":"minevent.manager","text":"<p>Implement the event manager.</p>"},{"location":"refs/manager/#minevent.manager.EventManager","title":"minevent.manager.EventManager","text":"<p>Implement an event manager.</p> <p>This event manager allows adding event handlers and firing events. An event is represented by a case-sensitive string.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.last_triggered_event","title":"minevent.manager.EventManager.last_triggered_event  <code>property</code>","text":"<pre><code>last_triggered_event: str | None\n</code></pre> <p>Get the last event name that was triggered.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The last event name that was fired of <code>None</code> if no event was fired.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n&gt;&gt;&gt; manager.last_triggered_event\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.add_event_handler","title":"minevent.manager.EventManager.add_event_handler","text":"<pre><code>add_event_handler(\n    event: str, event_handler: BaseEventHandler\n) -&gt; None\n</code></pre> <p>Add an event handler to an event.</p> <p>The event handler will be called everytime the event happens.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event to attach the event handler.</p> required <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to attach to the event.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventManager, EventHandler\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.has_event_handler","title":"minevent.manager.EventManager.has_event_handler","text":"<pre><code>has_event_handler(\n    event_handler: BaseEventHandler,\n    event: str | None = None,\n) -&gt; bool\n</code></pre> <p>Indicate if a handler is registered in the event manager.</p> <p>Note that this method relies on the <code>equal</code> method of the input event handler to compare event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to check.</p> required <code>event</code> <code>str | None</code> <p>Specifies an event to check. If the value is <code>None</code>, it will check all the events.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nFalse\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n&gt;&gt;&gt; # Add an event handler\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler))\nTrue\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_other_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_other_event\")\nFalse\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.remove_event_handler","title":"minevent.manager.EventManager.remove_event_handler","text":"<pre><code>remove_event_handler(\n    event: str, event_handler: BaseEventHandler\n) -&gt; None\n</code></pre> <p>Remove an event handler of a given event.</p> <p>Note that if the same event handler was added multiple times the event, all the duplicated handlers are removed. This method relies on the <code>equal</code> method of the input event handler to compare event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event handler is attached to.</p> required <code>event_handler</code> <code>BaseEventHandler</code> <p>Specifies the event handler to remove.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the event does not exist or if the handler is not attached to the event.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; # Remove the event handler of the engine\n&gt;&gt;&gt; manager.remove_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.reset","title":"minevent.manager.EventManager.reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the event manager.</p> <p>This method removes all the event handlers from the event manager.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; # Create an event manager\n&gt;&gt;&gt; from minevent import EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; # Add an event handler to the engine\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; from minevent import EventHandler\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nTrue\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\n&gt;&gt;&gt; manager.last_triggered_event\nmy_event\n&gt;&gt;&gt; # Reset the event manager\n&gt;&gt;&gt; manager.reset()\n&gt;&gt;&gt; # Check if `hello_handler` is registered in the event manager for 'my_event' event\n&gt;&gt;&gt; manager.has_event_handler(EventHandler(hello_handler), \"my_event\")\nFalse\n&gt;&gt;&gt; manager.last_triggered_event\nNone\n</code></pre>"},{"location":"refs/manager/#minevent.manager.EventManager.trigger_event","title":"minevent.manager.EventManager.trigger_event","text":"<pre><code>trigger_event(event: str) -&gt; None\n</code></pre> <p>Trigger the handler(s) for the given event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Specifies the event to fire.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import EventHandler, EventManager\n&gt;&gt;&gt; manager = EventManager()\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")  # do nothing because there is no event handler\n&gt;&gt;&gt; def hello_handler():\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; manager.add_event_handler(\"my_event\", EventHandler(hello_handler))\n&gt;&gt;&gt; manager.trigger_event(\"my_event\")\nHello!\n</code></pre>"}]}